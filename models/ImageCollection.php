<?php

namespace app\models;

use Imagine\Imagick\Imagine;
use Yii;
use yii\helpers\FileHelper;
use yii\imagine\Image;
use Imagine\Gd;
use Imagine\Image\Box;


/**
 * This is the model class for table "images_collection".
 *
 * @property int $id
 * @property string $image_name
 * @property string $email
 * @property int $user_id
 * @property string $added
 */
class ImageCollection extends \yii\db\ActiveRecord
{
    private const IMG_WIDTH = 600;
    private const IMG_MAX_HEIGHT = 450;

    /**
     * {@inheritdoc}
     */
    public static function tableName()
    {
        return 'images_collection';
    }

    public function beforeSave($insert)
    {
        $date = new \DateTime('now');
        $this->added = $date->format('Y-m-d H:i:s');
        $this->user_id = (!Yii::$app->user->isGuest) ? Yii::$app->user->getId() : 0;
        $this->deleted = 0;

        return parent::beforeSave($insert); // TODO: Change the autogenerated stub
    }

    /**
     * {@inheritdoc}
     */
    public function rules()
    {
        return [
            [['img_file', 'email', 'describe'], 'required'],
            [['user_id'], 'integer'],
            [['email'], 'email'],
            [['img_file'], 'image', 'extensions' => 'png, jpg'],
            [['img_file', 'email', 'describe', 'added'], 'safe'],
            [['email'], 'string', 'max' => 255],
            [['describe'],'string','max' => 100]
        ];
    }

    /**
     * {@inheritdoc}
     */
    public function attributeLabels()
    {
        return [
            'id' => 'ID',
            'img_file' => 'Изображение',
            'email' => 'Email',
            'describe' => 'Описание',
            'user_id' => 'User ID',
            'added' => 'Дата добавления',
        ];
    }

    public function upload()
    {
        if ($this->validate()) {
            $path = Yii::getAlias('@webroot') . '/resources/images';
            $this->img_file->saveAs($path . '/temp/' . $this->img_file->baseName . '.' . $this->img_file->extension);
            $image = $path . '/temp/' . $this->img_file->name;
            list($old_width, $old_height) = getimagesize($image);
            $ratio = (float)$old_width / $old_height;

            if ($ratio !== 0) $height = self::IMG_WIDTH / $ratio;
            else $height = ($old_height > self::IMG_MAX_HEIGHT) ? self::IMG_MAX_HEIGHT : $old_height;

            $path .= '/' . date('m_Y');
            if (!is_dir($path)) FileHelper::createDirectory($path, 0775);
            $img_name = md5_file($image) . '.' . $this->img_file->extension;

            Image::thumbnail($image, self::IMG_WIDTH, $height)->save($path . '/' . $img_name, ['quality' => 100]);
            $this->img_file = (string)date('m_Y') . '/' .$img_name;
            FileHelper::unlink($image);
            return true;
        } else return false;
    }
}
